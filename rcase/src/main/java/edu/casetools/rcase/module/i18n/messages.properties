/***************************************
*	 		Name Properties			   *  
****************************************/

Names.Stakeholder 	 = Stakeholder
Names.UserProfile 	 = User Profile
Names.Value 		 = Value
Names.ValueEnhancer  = Value Enhancer
Names.Participation  = Participation
Names.Grid 			 = Grid
Names.EthicalProfile = Ethical Profile

Names.Goal 	 	  = Goal
Names.SoftGoal 	  = Soft Goal
Names.Resource 	  = Resource
Names.Obstacle    = Obstacle

Names.ContextAttribute 		= Context Attribute
Names.UseCase		   		= Use Case
Names.RequirementContainer  = Requirement Container
Names.Requirement 			= Requirement
Names.SituationOfInterest   = Situation of Interest
Names.TestCase 				= Test Case
Names.Diagrams.Requirements = RequirementDiagram

/***************************************
*	 Stakeholder Diagram Properties   *  
****************************************/


// Stakeholder properties

StakeholderStereotype.properties.id 			 	 = Id
StakeholderStereotype.properties.desciption 	     = Description

StakeholderStereotype.properties.type 	 	 	 	 = Type
StakeholderStereotype.properties.type.subject 	 	 = Subject
StakeholderStereotype.properties.type.player 	 	 = Player
StakeholderStereotype.properties.type.crowd 	 	 = Crowd
StakeholderStereotype.properties.type.contextsetter  = Context Setter

StakeholderStereotype.properties.support 		 	      = Support
StakeholderStereotype.properties.support.highsupport 	  = High Support
StakeholderStereotype.properties.support.lowsupport 	  = Low Support
StakeholderStereotype.properties.support.highopposition   = High Opposition
StakeholderStereotype.properties.support.lowopposition 	  = Low Opposition

StakeholderStereotype.properties.power 		 	 = Power
StakeholderStereotype.properties.power.low 	 	 = Low
StakeholderStereotype.properties.power.med 	 	 = Med
StakeholderStereotype.properties.power.high  	 = High

// Ethical Profile properties

EthicalProfile.properties.id 			 	 = Id
EthicalProfile.properties.desciption 	     = Description

EthicalProfile.properties.profile					 = Profile
EthicalProfile.properties.profile.high			     = High
EthicalProfile.properties.profile.medium			 = Medium
EthicalProfile.properties.profile.low			     = Low
EthicalProfile.properties.profile.none			     = None

EthicalProfile.properties.govdependency 	 	 	 = Government Dependency
EthicalProfile.properties.vulnerability 	 	 	 = Vulnerability
EthicalProfile.properties.gravity		 	 	 	 = Gravity
EthicalProfile.properties.valueinrisk 	 	 	 	 = Value in Risk
EthicalProfile.properties.policyimpact 	 	 	 	 = Policy Impact

// Value properties

Value.properties.id 			 	 = Id
Value.properties.desciption 	     = Description

Value.properties.valuetype				 = Value Type
Value.properties.valuetype.good			 = Good
Value.properties.valuetype.service		 = Service
Value.properties.valuetype.information	 = Information

// Value Enhancer properties

ValueEnhancer.properties.id 			 	 = Id
ValueEnhancer.properties.desciption 	     = Description

ValueEnhancer.properties.enhancertype				 = Enhancer Type
ValueEnhancer.properties.enhancertype.product		 = Product
ValueEnhancer.properties.enhancertype.process		 = Process

// Participation properties

Participation.properties.id 			 	 = Id
Participation.properties.desciption 	     = Description

Participation.properties.participationtype		 	 		= Participation Type
Participation.properties.participationtype.notengaged		= Not Engaged
Participation.properties.participationtype.datasource		= Data Source
Participation.properties.participationtype.inform			= Inform
Participation.properties.participationtype.consult			= Consult
Participation.properties.participationtype.involve			= Involve
Participation.properties.participationtype.collaborate		= Collaborate
Participation.properties.participationtype.empower			= Empower


Ui.Command.CreateStakeholderDiagram.Details              = A Stakeholder is any group or individual who is affected by or can affect the achievement of an organization's objectives. This diagram helps organising and modelling information about the stakeholders of the system.
Ui.Command.CreateStakeholderDiagram.Information          = Create a Stakeholder Diagram
Ui.Command.CreateStakeholderDiagram.Label                = Stakeholder Diagram
Ui.Command.CreateStakeholderDiagram.Tooltip              = Creates a Stakeholder Diagram

/***************************************
*	 Objective Diagram Properties   	*  
****************************************/


// Objective properties
Objective.properties.prioritytype		 	 			= Priority Type
Objective.properties.participationtype.normal			= Normal
Objective.properties.participationtype.important		= Important
Objective.properties.participationtype.critical			= Critical

// RefineObj properties
RefineObj.properties.prioritytype		 	 			= Priority Type
RefineObj.properties.participationtype.normal			= Normal
RefineObj.properties.participationtype.important		= Important
RefineObj.properties.participationtype.critical			= Critical

Ui.Command.CreateObjectiveDiagram.Details              = An objective is either a goal or a softgoal. While goals have a clear-cut criterion to determine its satisfaction, and can be satisfied when there is enough positive and little negative evidence of its satisfaction, softgoals focus on the representation of  quality property, performance property or constraint (non-functional requirements), since there is typically no criterion to objectively determine its achievement or failure. This diagram helps organising and modelling information about the objectives of the system.
Ui.Command.CreateObjectiveDiagram.Information          = Create an Objective Diagram
Ui.Command.CreateObjectiveDiagram.Label                = Objective Diagram
Ui.Command.CreateObjectiveDiagram.Tooltip              = Creates an Objective Diagram

ScopePaletteGroup.Links = Links
ScopePaletteGroup.Nodes = Nodes

SequencePaletteGroup.Common          = Common
SequencePaletteGroup.InformationFlow = Information Flows

StatePaletteGroup.Common = Common

StatikPaletteGroup.Class           = Class model
StatikPaletteGroup.Common          = Common
StatikPaletteGroup.Component       = Component model
StatikPaletteGroup.Import          = Imports links
StatikPaletteGroup.InformationFlow = Information Flows
StatikPaletteGroup.Instance        = Instance model
StatikPaletteGroup.Package         = Package

ContextPaletteGroup.Bloc                = Nodes
ContextPaletteGroup.Notes				= Notes
ContextPaletteGroup.Dependency          = Relations
ContextPaletteGroup.Freedrawing         = Free drawing
ContextPaletteGroup.Import              = Imports links
ContextPaletteGroup.InformationFlow     = Information Flows
ContextPaletteGroup.Instance            = Instance model
ContextPaletteGroup.NotesAndConstraints = Notes and constraints
ContextPaletteGroup.Port                = Ports
ContextPaletteGroup.Grid                = Grid


Ui.Command.Create.CreateContextDependencyDiagram.Label = Context Dependency Diagram

Info.Session.Create                      = Create {0} 




Ui.Command.CreateContextRequirementsDiagram.Details              = A requirement specifies a capability or condition that must be satisfied. A requirement can define a function that a system must perform or a performance condition a system must achieve. A requirement can appear in other diagrams to show its relationships to other model elements. Requirements have properties and links to other elements (requirements or model elements).
Ui.Command.CreateContextRequirementsDiagram.Information          = Create a requirement diagram
Ui.Command.CreateContextRequirementsDiagram.Label                = Requirement diagram
Ui.Command.CreateContextRequirementsDiagram.Tooltip              = Create a requirement diagram

Ui.Command.CreateUseCaseDiagram.Details              = A use case is a methodology used in system analysis to identify, clarify, and organise system requirements. 
Ui.Command.CreateUseCaseDiagram.Information          = Create a use case diagram
Ui.Command.CreateUseCaseDiagram.Label                = Use Case Diagram
Ui.Command.CreateUseCaseDiagram.Tooltip              = Create a use case diagram

Ui.Derive.From                                                         = Derived from
Ui.Derive.To                                                           = Derived
Ui.Copy.From                                                           = Copied from
Ui.Copy.To                                                             = Copied
Ui.Part.From                                                           = Part of
Ui.Part.To															   = Part
Ui.Refine.From                                                         = Refines
Ui.Refine.To                                                           = Refined by
Ui.Satisfy.From                                                        = Satisfies
Ui.Satisfy.To                                                          = Satisfied by
Ui.Trace.From                                                          = Traced from
Ui.Trace.To                                                            = Traced to
Ui.Verify.From                                                         = Verifies
Ui.Verify.To                                                           = Verified by

Ui.ContextDependency.From                                              = Depended from
Ui.ContextDependency.To                                                = Depends on
Ui.Identifies.From                                                     = Identified from
Ui.Identifies.To                                                       = Identifies
Ui.Triggers.From                                                       = Triggered by
Ui.Triggers.To                                                         = Triggers

Ui.ContextAttribute.Property.TagId                             = Id
Ui.ContextAttribute.Property.TagText				   		   = Description

Ui.Requirement.Property.TagId							     	   = Id
Ui.Requirement.Property.TagText								       = Text

Ui.SituationOfInterest.Property.TagId							   = Id
Ui.SituationOfInterest.Property.TagText							   = Text
Ui.SituationOfInterest.Property.TagDescription					   = Detection description

ContainerTable.Title		  = Requirement Container Edition 
DependencyTable.Title		  = Dependency Table 

Excel.Author = 
Excel.Company = 
Excel.Application = Requirements for Context-Aware Systems Engineering (RC-ASE)

Dialogs.Title.Export = Export 

Table.ContextModel.Header.Name = Context Model Table
Menu.ContextModel.Combobox.Label = Filter:
Menu.ContextModel.Combobox.All = All project

Menu.Container.New = New Requirement
Menu.Container.Delete = Delete Requirement
Menu.Container.Refresh = Refresh
Menu.Container.Export = Export
Menu.Container.Import = Import
Menu.Container.Combobox.Label = Requirement Container:

Menu.Matrix.Filter.Columns = Filter Columns
Menu.Matrix.Filter.Rows = Filter Rows
Menu.Matrix.Refresh = Refresh
Menu.Matrix.Export = Export
Menu.Matrix.Import = Import
Menu.Matrix.Combobox.Label = Link Type:

Buttons.Accept = Accept
Buttons.Cancel = Cancel

DualList.label.Stereotypes = Stereotypes:
DualList.label.FilteredStereotypes = Filtered Stereotypes:

Dialogs.Name.Column = Column
Dialogs.Name.Row    = Row

Table.Container.Header.Name 	   = Name
Table.Container.Header.Id          = Id
Table.Container.Header.Description = Description

Table.ContextModel.Header.Name 	   		  = Name
Table.ContextModel.Header.Id          	  = Id
Table.ContextModel.Header.Text  		  = Text

Table.Dependency.Header.Name = Dependency Table 

Info.Error                    = I/O Error
Error.ImpossibleToWriteFile   = It was impossible to write the file.

UseCasePaletteGroup.Nodes     = Nodes

ExcelError.NullName = The name of the excel sheet cannot be null
ExcelError.EmptyName = The name of the excel sheet must not be empty string
ExcelError.InvalidName = Invalid excel sheet name '
ExcelError.InvalidNameTip = '. Sheet names must not begin or end with (').
ExcelError.InvalidChar = Invalid char (
ExcelError.InvalidCharIndex = ) found at index (
ExcelError.InvalidCharName = ) in sheet name '
ExcelError.InvalidState = Invalid sheet state: 
ExcelError.InvalidStateTip = "Sheet state must have Workbook.SHEET_STATE_* constants like format"

Ui.Dependency.From									 = Context depends from
Ui.Dependency.To									 = Context depends on
Ui.Derives.From										 = Derives from
Ui.Derives.To										 = Derives to
Ui.Identifies.From									 = Identified from
Ui.Identifies.To									 = Identifies